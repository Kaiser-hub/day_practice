/*
由于业绩优秀，公司给小Q放了 n 天的假，身为工作狂的小Q打算在在假期中工作、锻炼或者休息。他有个奇怪的习惯：不会连续两天工作或锻炼。只有当公司营业时，小Q才能去工作，只有当健身房营业时，小Q才能去健身，小Q一天只能干一件事。给出假期中公司，健身房的营业情况，求小Q最少需要休息几天。

输入描述:
第一行一个整数 n(1\leq n\leq 100000)n(1≤n≤100000) 表示放假天数
第二行 n 个数 每个数为0或1,第 i 个数表示公司在第 i 天是否营业
第三行 n 个数 每个数为0或1,第 i 个数表示健身房在第 i 天是否营业
（1为营业 0为不营业）


输出描述:
一个整数，表示小Q休息的最少天数
示例1

输入
4
1 1 0 0
0 1 1 0

输出
2

说明
小Q可以在第一天工作，第二天或第三天健身，小Q最少休息2天
*/


#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

void Holiday() {
	int n = 0;//放假总天数
	cin >> n;
	vector<int> company(n + 1, 0);//公司营业状态
	vector<int> gym(n + 1, 0);//健身房营业状态

	for (int i = 1; i < n + 1; i++) {
		cin >> company[i];
	}
	for (int i = 1; i < n + 1; i++) {
		cin >> gym[i];
	}
	
	vector<vector<int>> Q(n + 1, vector<int>(3, 0));//Q[i][0]，Q[i][1]，Q[i][2]分别表示假如在第i天休息、工作、健身的情况下，前i天不休息的最大天数
	for (int i = 1; i < n + 1; i++) {
		Q[i][0] =max(Q[i - 1][0], max(Q[i - 1][1], Q[i - 1][2]));//如果第i天休息，那么前i天有事做的天数就是前一天所有情况下之中的最大值
		if (company[i] == 1) {
			Q[i][1] = max(Q[i - 1][0], Q[i - 1][2]) + 1;//如果第i天工作，那么前i天有事做的最大值就是休息和健身两者之中的最大值+1
		}
		if (gym[i] == 1) {
			Q[i][2] = max(Q[i - 1][0], Q[i - 1][1]) + 1;//如果第i天健身，那么前i天有事做的最大值就是休息和工作两者之中的最大值+1
		}
	}
	cout << n - max(Q[n][0], max(Q[n][1], Q[n][2])) << endl;

}

/*int main() {
	Holiday();
	return 0;
}*/

/*
小W有一个电子时钟用于显示时间，显示的格式为HH:MM:SS，HH，MM，SS分别表示时，分，秒。其中时的范围为[‘00’,‘01’…‘23’]，分的范围为[‘00’,‘01’…‘59’]，秒的范围为[‘00’,‘01’…‘59’]。

但是有一天小W发现钟表似乎坏了，显示了一个不可能存在的时间“98:23:00”，小W希望改变最少的数字，使得电子时钟显示的时间为一个真实存在的时间，譬如“98:23:00”通过修改第一个’9’为’1’，即可成为一个真实存在的时间“18:23:00”。修改的方法可能有很多，小W想知道，在满足改变最少的数字的前提下，符合条件的字典序最小的时间是多少。其中字典序比较为用“HHMMSS”的6位字符串进行比较。


输入描述:
每个输入数据包含多个测试点。每个测试点后有一个空行。 第一行为测试点的个数T(T<=100)。 每个测试点包含1行，为一个字符串”HH:MM:SS”，表示钟表显示的时间。

输出描述:
对于每个测试点，输出一行。如果钟表显示的时间为真实存在的时间，则不做改动输出该时间，否则输出一个新的”HH:MM:SS”，表示修改最少的数字情况下，字典序最小的真实存在的时间。

输入例子1:
2
19:90:23
23:59:59

输出例子1:
19:00:23
23:59:59
*/
#include<iostream>
#include<string>

using namespace std;

string Time() {
	string time;
	cin >> time;
	string h(time, 0, 2);//获取time的小时部分
	string m(time, 3, 2);//获取time的分钟部分
	string s(time, 6, 2);//获取time的秒部分

	//分别把小时、分钟、秒的字符串转换成10进制数，判断是否合法
	int H = stoi(h);
	int M = stoi(m);
	int S = stoi(s);

	if ((H >= 0 && H < 24) && (M >= 0 && M < 60) && (S >= 0 && S < 60)) {
		return time;
	}
	//因为要保证字典序优先，所有小时、分钟、秒的个位都不需要改动，只要不合法，就把十位改成0即可
	else {
		string new_time(time);
		if (!(H >= 0 && H < 24)) {
			new_time[0] = '0';
		}

		if (!(M >= 0 && M < 60)) {
			new_time[3] = '0';
		}

		if (!(S >= 0 && S < 60)) {
			new_time[6] = '0';
		}

		return new_time;
	}
}

//int main(int argc,char* argv[]) {
//	int T = 0;//T组测试数据
//	cin >> T;
//	while (T > 0) {
//		cout << Time() << endl;
//		T--;
//	}
//	return 0;
//}